# EXAMPLE USAGE:
#
#   Refer for explanation to following link:
#   https://lefthook.dev/configuration/
#
commit-msg:
  parallel: false
  commands:
    validate-commit:
      run: |
        #!/usr/bin/bash
        commit_msg=$(cat {1})
        first_line=$(echo "$commit_msg" | head -n 1)
        commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-zA-Z0-9_\-]+\))?: .+$'

        if ! echo "$first_line" | grep -qE "$commit_regex"; then
          echo "❌ コミットメッセージが Conventional Commits 形式に準拠していません"
          echo ""
          echo "正しい形式:"
          echo "  <type>: <日本語の説明>"
          echo "  <type>(<scope>): <日本語の説明>"
          echo ""
          echo "使用可能なtype:"
          echo "  feat:     新機能"
          echo "  fix:      バグ修正"
          echo "  docs:     ドキュメントのみの変更"
          echo "  style:    フォーマット変更（コードの動作に影響しない）"
          echo "  refactor: リファクタリング"
          echo "  perf:     パフォーマンス改善"
          echo "  test:     テストの追加・修正"
          echo "  build:    ビルドシステムや外部依存の変更"
          echo "  ci:       CI設定ファイルやスクリプトの変更"
          echo "  chore:    その他の変更（ソースやテストの変更を含まない）"
          echo "  revert:   以前のコミットの取り消し"
          echo ""
          echo "例:"
          echo "  feat: ユーザー認証機能を追加"
          echo "  fix(auth): ログイン時のエラーを修正"
          echo "  chore: Dockerfile の修正"
          echo ""
          echo "現在のメッセージ:"
          echo "  $first_line"
          echo ""
          exit 1
        fi

        if ! echo "$first_line" | grep -qE '^[a-z]+(\([a-zA-Z0-9_\-]+\))?: .+$'; then
          echo "❌ typeの後には「: 」（コロン + 半角スペース）が必要です"
          echo ""
          echo "現在のメッセージ:"
          echo "  $first_line"
          exit 1
        fi

        echo "✅ コミットメッセージは有効です"
        echo "  Type: $(echo "$first_line" | sed -E 's/^([a-z]+).*$/\1/')"
        echo "  Subject: $(echo "$first_line" | sed -E 's/^[a-z]+(\([a-zA-Z0-9_\-]+\))?: (.+)$/\2/')"

pre-commit:
  parallel: false
  jobs:
    - name: fmt jobs
      group: &pre_jobs_group
        parallel: true
        jobs:
          - name: dprint fmt
            run: dprint fmt --staged
            glob: "*.{json,jsonc,md,toml,yml,yaml}"
            files: git diff --name-only --diff-filter=d --staged

    - name: tests
      group: &build_check_group
        parallel: true
        jobs:
          - name: docker build
            interactive: true
            run: docker build -t tmp -f Dockerfile .
            glob: "Dockerfile"
            files: git diff --name-only --diff-filter=d --staged

pre-push:
  parallel: false
  jobs:
    - name: pre jobs
      group: *pre_jobs_group
    - name: tests
      group: *build_check_group
